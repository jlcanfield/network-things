# Yet another DNS-to-DHCP sync script for Mikrotik routers (cmon, man)
# based on syncdns v1.0.0 by Michael Paddon (https://github.com/MichaelPaddon/routeros-scripts/blob/main/syncdns)
# Thanks Michael Paddon!
# Uh, no license stuff, because, no one should use this. I have no idea what I'm doing.

# Define the default domain to use for DNS records if no domain is specified
# in the DHCP server configuration.
:global DefaultDomain "localdomain"

# Set the TTL (time-to-live) value for the automatically generated DNS records.
# This determines how long the records will be cached by other DNS servers.
:global DnsTtl 5m

# Define a magic comment string to identify the DNS records that were
# automatically generated by this script. This allows the script to
# differentiate between manually created records and those it has generated.
:global Magic "automatic-from-dhcp"

# Define a function to return the domain associated with a given IP address.
# This function searches the DHCP server configuration for a network block
# that contains the IP address, and returns the domain associated with that
# network block. If no matching network block is found, it returns the
# DefaultDomain.
:global GetDomain do={
    :global DefaultDomain
    :local ipaddr [:toip $1]
    /ip dhcp-server network
    :foreach network in [find] do={
        :local netblock [get value-name=address $network]
        :if ($ipaddr in $netblock) do={
            :return [get value-name=domain $network]
        }
    }
    :return $DefaultDomain
}

# Define a function to validate whether a given string is a valid DNS name.
# This function checks that the string starts with a letter, contains only
# letters, digits, and hyphens, and is no more than 63 characters long.
:global IsValidName do={
    :local string [:tostr $1]
    :return ($string ~ "^[A-Za-z]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?$")
}

# Define a function to gather a list of all the fully qualified domain names
# (FQDNs) and their associated IP addresses from the current DHCP leases.
# This function iterates through all the DHCP leases, checks that the hostname
# is a valid DNS name, then constructs the FQDN by combining the hostname and
# the domain associated with the lease's IP address.
:global GetFqdns do={
    :global GetDomain
    :global IsValidName
    /ip dhcp-server lease
    :local fqdns [:toarray ""]
    :foreach lease in [find] do={
        :local hostname [get value-name=host-name $lease]
        :if ([$IsValidName $hostname]) do={
            :local ipaddr [get value-name=address $lease]
            :local domain [$GetDomain $ipaddr]
            :local fqdn "$hostname.$domain"
            :if ([:len ($fqdns->$fqdn)] = 0) do={
                :set ($fqdns->$fqdn) $ipaddr
            }
        }
    }
    :return $fqdns
}

# Define a function to update a DNS record on the router.
# This function first checks if the correct record already exists. If so, it
# returns false to indicate that no update was necessary.
# If a record with the same name but a different IP address or TTL exists, it
# updates the record and returns true to indicate that a change was made.
# If no record exists, it creates a new record and returns true.
:global Update do={
    :global DnsTtl
    :global Magic
    :local fqdn [:tostr $1]
    :local ipaddr [:toip $2]
    
    # Check if the correct record already exists
    /ip dns static
    :if ([:len [find where name=$fqdn address=$ipaddr ttl=$DnsTtl comment=$Magic]] > 0) do={
        :return false
    }
    
    # If a record with the same name exists, but it has a different IP address
    # or TTL, update the existing record
    :local exists [find where name=$fqdn comment=$Magic]
    :if ([:len $exists] > 0) do={
        :log info "syncdns: update $fqdn -> $ipaddr"
        set address=$ipaddr ttl=$DnsTtl $exists
        :return true
    }
    
    # If no record with the same name exists at all, create a new record
    # Note: a manually created record may exist which MUST NOT be touched
    :if ([:len [find where name=$fqdn]] = 0) do={
        :log info "syncdns: add $fqdn -> $ipaddr"
        add name=$fqdn address=$ipaddr ttl=$DnsTtl comment=$Magic
        :return true
    }
    
    :return false
}

# Define a function to synchronize the DNS records on the router with the
# current DHCP leases.
# This function first calls the GetFqdns function to gather a list of all the
# FQDNs and associated IP addresses from the DHCP leases.
# It then iterates through this list, calling the Update function for each
# FQDN to ensure the corresponding DNS record is up-to-date.
# Finally, it removes any DNS records that were previously created by this
# script but are no longer associated with a DHCP lease.
:global SyncDns do={
    :global GetFqdns
    :global Magic
    :global Update
    
    # Update DNS records to match the current DHCP leases
    :local fqdns [$GetFqdns]
    :foreach fqdn,ipaddr in=$fqdns do={
        [$Update $fqdn $ipaddr]
    }
    
    # Remove any obsolete DNS records that were previously created by this script
    /ip dns static
    :foreach entry in [find where comment=$Magic] do={
        :local fqdn [get value-name=name $entry]
        :if ([:len ($fqdns->$fqdn)] = 0) do={
            :log info "syncdns: remove $fqdn"
            remove $entry
        }
    }
}

# Run the synchronization process
:log info "syncdns: synchronize"
[$SyncDns]